package com.pmi.kafka;

import org.apache.flink.table.functions.ScalarFunction;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import java.io.StringReader;
import java.io.StringWriter;

/**
 * Basic version of a Flink UDF that transforms input XML using XSLT to remove {@code RenderingInfo} element.
 * <p>
 * To register a function use this statement:
 * <pre>CREATE FUNCTION WindowsEventDropRenderingInfo AS 'com.pmi.kafka.WindowsEventDropRenderingInfoFunction'
 * USING JAR 'confluent-artifact://cfa-knkpxg';</pre>
 * {@code cfa-knkpxg} is identifier generated by CCloud during jar upload.
 * <p>
 * After the function is registered, it can be used in queries:
 * <pre>SELECT DECODE(key, 'utf-8'), WindowsEventDropRenderingInfo(DECODE(val, 'utf-8')) FROM `cloudwatch-0`;</pre>
 *
 * @author <a href="mailto:piotr.smolinski@confluent.io">Piotr Smolinski</a>
 */
public class WindowsEventDropRenderingInfoFunction extends ScalarFunction {

    private static final Logger logger = LogManager.getLogger();

    public String eval(String xml) {

        if (xml == null) {
            return null;
        }

        try {

            // getClass().getResourceAsStream(...) searches a named file in the same package as the class
            // Creating a new transformer this way is suboptimal as it must parse the XSLT each time
            // the function is executed.
            var transformer = TransformerFactory.newInstance()
                    .newTransformer(new StreamSource(
                            getClass().getResourceAsStream("WindowsEventDropRenderingInfo.xslt")));

            var reader = new StringReader(xml);
            var writer = new StringWriter();

            transformer.transform(new StreamSource(reader), new StreamResult(writer));

            return writer.toString();

        } catch (Exception e) {

            logger.warn("Failed transforming xml", e);

            return null;

        }

    }

}
